generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id          String         @id @default(cuid())
  firstName   String
  lastName    String
  email       String         @unique
  role        UserRole       @default(USER)
  password    String
  affiliation String
  country     String
  isVerified  Boolean        @default(false)
  createdAt   DateTime       @default(now())
  inbox       Notification[]

  conferenceRoles   ConferenceRoleEntries[]
  directSubmissions Submission[]
  authorEntries     SubmissionAuthor[]      @relation("AuthorUser")
}

model Notification {
  id         String   @id @default(cuid())
  message    String
  title      String
  isRead     Boolean  @default(false)
  isArchived Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum ConferenceStatus {
  PENDING
  APPROVED
  REJECTED
  CAMERA_READY_PHASE
  COMPLETED
}

model Conference {
  id                  String           @id @default(cuid())
  title               String
  acronym             String           @unique
  description         String
  locationVenue       String
  locationCity        String
  locationCountry     String
  callForPapers       String
  websiteUrl          String?
  startDate           DateTime
  endDate             DateTime
  submissionDeadline  DateTime
  cameraReadyDeadline DateTime
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  status              ConferenceStatus @default(PENDING)
  isPublic            Boolean          @default(false)
  isDeleted           Boolean          @default(false)
  researchAreas       Json

  conferenceRoles ConferenceRoleEntries[]
  submissions     Submission[]
}

// enum SubmissionStatus {
//   DRAFT
//   ACCEPTED
//   REFUSED
//   UNDER_REVIEW
//   REVISION
// }

model Submission {
  id                  String     @id @default(cuid())
  title               String
  abstract            String
  keywords            Json
  paperFilePath       String?
  paperFileName       String?
  cameraReadyFilepath String?
  cameraReadyFilename String?
  primaryArea         String
  secondaryArea       String
  // status              SubmissionStatus @default(DRAFT)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  conferenceId        String
  conference          Conference @relation(fields: [conferenceId], references: [id])
  submittedById       String
  submittedBy         User       @relation(fields: [submittedById], references: [id])

  submissionAuthors SubmissionAuthor[]
  reviewAssignments ReviewAssignment[]

  reviews Review[]

  decisionAssignment DecisionAssignment? @relation("DecisionAssignmentSubmission")
  decision           Decision?           @relation("DecisionSubmission")
}

model SubmissionAuthor {
  id              String     @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  affiliation     String
  country         String
  submissionId    String
  submission      Submission @relation(fields: [submissionId], references: [id])
  isCorresponding Boolean
  createdAt       DateTime   @default(now())
  hasPaid         Boolean    @default(false)

  userId String?
  user   User?   @relation("AuthorUser", fields: [userId], references: [id])

  @@unique([submissionId, email]) // Ensure unique authors per submission by email
}

enum ConferenceRole {
  MAIN_CHAIR
  CHAIR
  REVIEWER
}

model ConferenceRoleEntries {
  id           String         @id @default(cuid())
  userId       String
  conferenceId String
  role         ConferenceRole
  createdAt    DateTime       @default(now())

  user                User                 @relation(fields: [userId], references: [id])
  conference          Conference           @relation(fields: [conferenceId], references: [id])
  reviewAssignments   ReviewAssignment[]   @relation("Reviewer")
  assignedByReviews   ReviewAssignment[]   @relation("AssignedBy")
  DecisionAssignment  DecisionAssignment[] @relation("ChairReviewer")
  assignedByDecisions DecisionAssignment[] @relation("AssignedBy")

  @@unique([userId, conferenceId])
  @@index([conferenceId, role]) // For efficient role-based queries
  @@index([role]) // For efficient role-based queries
  @@index([userId]) // For efficient user-based queries
}

model ReviewAssignment {
  id               String                @id @default(cuid())
  submissionId     String
  createdAt        DateTime              @default(now())
  dueDate          DateTime
  reviewerRoleId   String
  assignedByRoleId String
  submission       Submission            @relation(fields: [submissionId], references: [id])
  reviewer         ConferenceRoleEntries @relation("Reviewer", fields: [reviewerRoleId], references: [id])
  assignedBy       ConferenceRoleEntries @relation("AssignedBy", fields: [assignedByRoleId], references: [id])

  // One-to-one relationship with Review (optional until review is submitted)
  review Review? @relation("AssignmentReview")

  @@unique([submissionId, reviewerRoleId]) // Ensure one reviewer per submission
  @@index([submissionId]) // For efficient submission-based queries
  @@index([reviewerRoleId]) // For efficient reviewer-based queries
  @@index([assignedByRoleId]) // For efficient assigned-by queries
}

enum RecStatus {
  REVISION
  ACCEPTED
  REJECTED
}

model Review {
  id                String    @id @default(cuid())
  submissionId      String
  createdAt         DateTime  @default(now())
  assignmentId      String    @unique // Make this unique for one-to-one relationship
  recommendation    RecStatus
  overallEvaluation String
  overallScore      Int

  submission Submission       @relation(fields: [submissionId], references: [id])
  assignment ReviewAssignment @relation("AssignmentReview", fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model DecisionAssignment {
  id               String                @id @default(cuid())
  submissionId     String
  createdAt        DateTime              @default(now())
  dueDate          DateTime
  chairRoleId      String
  assignedByRoleId String
  submission       Submission            @relation("DecisionAssignmentSubmission", fields: [submissionId], references: [id])
  chairReviewer    ConferenceRoleEntries @relation("ChairReviewer", fields: [chairRoleId], references: [id])
  assignedBy       ConferenceRoleEntries @relation("AssignedBy", fields: [assignedByRoleId], references: [id])

  decision Decision? @relation("AssignmentDecision")

  @@unique([submissionId]) // Ensure one decision per submission
  @@index([submissionId])
  @@index([chairRoleId])
  @@index([assignedByRoleId])
}

enum DecStatus {
  ACCEPT
  MAJOR_REVISION
  MINOR_REVISION
  REJECT
}

model Decision {
  id             String             @id @default(cuid())
  submissionId   String             @unique
  createdAt      DateTime           @default(now())
  assignmentId   String             @unique
  reviewDecision DecStatus
  submission     Submission         @relation("DecisionSubmission", fields: [submissionId], references: [id])
  assignment     DecisionAssignment @relation("AssignmentDecision", fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}
